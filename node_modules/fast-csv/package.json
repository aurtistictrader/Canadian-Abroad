{
  "name": "fast-csv",
  "version": "0.0.3",
  "description": "CSV parser for node.js",
  "main": "index.js",
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:C2FO/fast-csv.git"
  },
  "keywords": [
    "csv",
    "parser",
    "fast"
  ],
  "homepage": "http://c2fo.github.com/fast-csv/index.html",
  "author": {
    "name": "Doug Martin"
  },
  "license": "MIT",
  "devDependencies": {
    "it": "~0.2.6",
    "grunt-it": "~0.3.1",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.4.3"
  },
  "dependencies": {
    "is-extended": "0.0.8",
    "object-extended": "0.0.5",
    "extended": "0.0.4"
  },
  "readme": "<a name=\"top\"></a>\n\n\n  [![build status](https://secure.travis-ci.org/C2FO/fast-csv.png)](http://travis-ci.org/C2FO/fast-csv)\n# Fast-csv\n\nThis is a library is aimed at providing fast CSV parsing. It accomplishes this by not handling some of the more complex\nedge cases such as multi line rows. However it does support escaped values, embedded commas, double and single quotes.\n\n## Installation\n\n`npm install fast-csv`\n\n## Usage\n\nTo parse a file.\n\n```javascript\nvar csv = require(\"fast-csv\");\n\ncsv(\"my.csv\")\n .on(\"data\", function(data){\n     console.log(data):\n })\n .on(\"end\", function(){\n     console.log(\"done\");\n })\n .parse();\n```\n\nYou may also parse a stream.\n\n```javascript\nvar stream = fs.createReadStream(\"my.csv\");\n\ncsv(stream)\n .on(\"data\", function(data){\n     console.log(data):\n })\n .on(\"end\", function(){\n     console.log(\"done\");\n })\n .parse();\n\n```\n\nIf you expect the first line your csv to headers you may pass a headers option in. Setting the headers option will\ncause change each row to an object rather than an array.\n\n```javascript\nvar stream = fs.createReadStream(\"my.csv\");\n\ncsv(stream, {headers : true})\n .on(\"data\", function(data){\n     console.log(data):\n })\n .on(\"end\", function(){\n     console.log(\"done\");\n })\n .parse();\n\n```\n\nYou may alternatively pass an array of header names which must match the order of each column in the csv, otherwise\nthe data columns will not match.\n\n```javascript\nvar stream = fs.createReadStream(\"my.csv\");\n\ncsv(stream, {headers : [\"firstName\", \"lastName\", \"address\"]})\n .on(\"data\", function(data){\n     console.log(data):\n })\n .on(\"end\", function(){\n     console.log(\"done\");\n })\n .parse();\n\n```\n\nIf your data may include empty rows, the sort Excel might include at the end of the file for instance, you can ignore\nthese by including the `ignoreEmpty` option.\n\nAny rows consisting of nothing but empty strings and/or commas will be skipped, without emitting a 'data' or 'error' event.\n\n```javascript\nvar stream = fs.createReadStream(\"my.csv\");\n\ncsv(stream, {ignoreEmpty: true})\n .on(\"data\", function(data){\n     console.log(data):\n })\n .on(\"end\", function(){\n     console.log(\"done\");\n })\n .parse();\n\n```\n\n### Validating\n\nYou can validate each row in the csv by providing a validate handler. If a row is invalid then a `data-invalid` event\nwill be emitted with the row and the index.\n\n```javascript\nvar stream = fs.createReadStream(\"my.csv\");\n\ncsv(stream, {headers : true})\n .validate(function(data){\n     return data.age < 50; //all persons must be under the age of 50\n })\n .on(\"data-invalid\", function(data){\n     //do something with invalid row\n })\n .on(\"data\", function(data){\n     console.log(data):\n })\n .on(\"end\", function(){\n     console.log(\"done\");\n })\n .parse();\n\n```\n\n### Transforming\n\nYou can transform data by providing in a transform function. What is returned from the transform function will\nbe provided to validate and emitted as a row.\n\n```javascript\nvar stream = fs.createReadStream(\"my.csv\");\n\ncsv(stream)\n .transform(function(data){\n     return data.reverse(); //reverse each row.\n })\n .on(\"data\", function(data){\n     console.log(data):\n })\n .on(\"end\", function(){\n     console.log(\"done\");\n })\n .parse();\n\n```\n\n## License\n\nMIT <https://github.com/C2FO/fast-csv/raw/master/LICENSE>\n\n##Meta\n* Code: `git clone git://github.com/C2FO/fast-csv.git`\n* Website: <http://c2fo.com>\n* Twitter: [http://twitter.com/c2fo](http://twitter.com/c2fo) - 877.465.4045\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/C2FO/fast-csv/issues"
  },
  "_id": "fast-csv@0.0.3",
  "dist": {
    "shasum": "d9eaecaf308f0c01da620b502d7ea4dfbce85149"
  },
  "_from": "fast-csv@",
  "_resolved": "https://registry.npmjs.org/fast-csv/-/fast-csv-0.0.3.tgz"
}
